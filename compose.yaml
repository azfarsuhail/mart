version: '3.8'
name: project
x-kong-config:
  &kong-env
  KONG_DATABASE: ${KONG_DATABASE:-postgres}
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: db
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password

services:
  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    profiles: [ "database" ]
    depends_on:
      - db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    restart: on-failure

  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations up && kong migrations finish
    profiles: [ "database" ]
    depends_on:
      - db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    restart: on-failure

  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER:-kong}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_ADMIN_GUI_LISTEN: "${KONG_ADMIN_GUI_LISTEN:-0.0.0.0:8002}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
    secrets:
      - kong_postgres_password
    ports:
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8005:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      - "127.0.0.1:8001:8001/tcp"
      - "127.0.0.1:8444:8444/tcp"
      - "127.0.0.1:8004:8002/tcp"
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
    security_opt:
      - no-new-privileges

  db:
    image: postgres:9.5
    profiles: [ "database" ]
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${KONG_PG_DATABASE:-kong}", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    volumes:
      - kong_data:/var/lib/postgresql/data

  user_service:
    build:
      context: ./user_service
      dockerfile: Dockerfile
    container_name: user_service
    environment:
      DATABASE_URL: postgresql://user:password@postgres_db:5432/imtiaz_mart
      KAFKA_BOOTSTRAP_SERVERS: broker:9092
    ports:
      - "8011:8000"
    depends_on:
      - postgres_db
      - broker

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
      
  product_service:
    build:
      context: ./product_service
      dockerfile: Dockerfile
    container_name: product_service
    environment:
      DATABASE_URL: postgresql://user:password@postgres_db:5432/imtiaz_mart
      KAFKA_BOOTSTRAP_SERVERS: broker:9092
    ports:
      - "8012:8000"
    depends_on:
      - postgres_db
      - broker

  order_service:
    build:
      context: ./order_service
      dockerfile: Dockerfile
    container_name: order_service
    environment:
      DATABASE_URL: postgresql://user:password@postgres_db:5432/imtiaz_mart
      KAFKA_BOOTSTRAP_SERVERS: broker:9092
    ports:
      - "8013:8000"
    depends_on:
      - postgres_db
      - broker

  inventory_service:
    build:
      context: ./inventory_service
      dockerfile: Dockerfile
    container_name: inventory_service
    environment:
      DATABASE_URL: postgresql://user:password@postgres_db:5432/imtiaz_mart
      KAFKA_BOOTSTRAP_SERVERS: broker:9092
    ports:
      - "8014:8000"
    depends_on:
      - postgres_db
      - broker

  notification_service:
    build:
      context: ./notification_service
      dockerfile: Dockerfile
    container_name: notification_service
    environment:
      KAFKA_BOOTSTRAP_SERVERS: broker:9092
    ports:
      - "8015:8000"
    depends_on:
      - broker

  payment_service:
    build:
      context: ./payment_service
      dockerfile: Dockerfile
    container_name: payment_service
    environment:
      DATABASE_URL: postgresql://user:password@postgres_db:5432/imtiaz_mart
      KAFKA_BOOTSTRAP_SERVERS: broker:9092
      PAYFAST_MERCHANT_ID: your_payfast_merchant_id
      PAYFAST_MERCHANT_KEY: your_payfast_merchant_key
      STRIPE_API_KEY: your_stripe_api_key
    ports:
      - "8016:8000"
    depends_on:
      - postgres_db
      - broker

  postgres_db:
    image: postgres:latest
    restart: always
    container_name: PostgresCont
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=imtiaz_mart
    ports:
      - '5433:5432'
    volumes:
      - postgres_db:/var/lib/postgresql/data

  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - '9092:9092'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:19092'
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker
      
volumes:
  postgres_db:
    driver: local
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs

networks:
  default:
    driver: bridge
secrets:
  kong_postgres_password:
    file: ./POSTGRES_PASSWORD